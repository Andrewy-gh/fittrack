name: Fly Deploy
on:
  push:
    branches:
      - main
jobs:
  deploy:
    name: Deploy app
    runs-on: ubuntu-latest
    concurrency: deploy-group    # optional: ensure only one action runs at a time
    steps:
      - uses: actions/checkout@v4
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          cache: true
          cache-dependency-path: server/go.sum
      - name: Cache Go tools
        uses: actions/cache@v3
        with:
          path: ~/go/bin
          key: ${{ runner.os }}-go-tools-goose-v3.24.3
          restore-keys: |
            ${{ runner.os }}-go-tools-
      - name: Install Goose
        run: |
          if ! command -v goose &> /dev/null; then
            go install github.com/pressly/goose/v3/cmd/goose@v3.24.3
          fi
      - name: Run database migrations
        run: |
          # Disable prepared statements (simple protocol) for goose
          GOOSE_DB_URL="${{ secrets.DATABASE_URL }}?default_query_exec_mode=simple_protocol"
          echo "Checking migration status..."
          if goose -dir server/migrations postgres "$GOOSE_DB_URL" status | grep -q "no migrations"; then
            echo "Running migrations..."
            goose -dir server/migrations postgres "$GOOSE_DB_URL" up
          else
            echo "Database is already up to date, checking for new migrations..."
            goose -dir server/migrations postgres "$GOOSE_DB_URL" up || echo "No new migrations to apply"
          fi
      - name: Build and deploy to Fly.io
        run: |
          # Set client env vars for Docker build
          echo "VITE_PROJECT_ID=${{ secrets.VITE_PROJECT_ID }}" > client/.env
          echo "VITE_PUBLISHABLE_CLIENT_KEY=${{ secrets.VITE_PUBLISHABLE_CLIENT_KEY }}" >> client/.env
                     
          # Now deploy
          flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}