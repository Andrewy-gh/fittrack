// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options,
  getExercises,
  postExercises,
  getExercisesById,
  getExercisesByIdRecentSets,
  getWorkouts,
  postWorkouts,
  deleteWorkoutsById,
  getWorkoutsById,
  putWorkoutsById,
} from "../sdk.gen";
import { queryOptions, type UseMutationOptions } from "@tanstack/react-query";
import type {
  GetExercisesData,
  PostExercisesData,
  PostExercisesError,
  PostExercisesResponse,
  GetExercisesByIdData,
  GetExercisesByIdRecentSetsData,
  GetWorkoutsData,
  PostWorkoutsData,
  PostWorkoutsError,
  PostWorkoutsResponse,
  DeleteWorkoutsByIdData,
  DeleteWorkoutsByIdError,
  GetWorkoutsByIdData,
  PutWorkoutsByIdData,
  PutWorkoutsByIdError,
} from "../types.gen";
import { client as _heyApiClient } from "../client.gen";

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
    tags?: ReadonlyArray<string>;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
  tags?: ReadonlyArray<string>,
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl:
      options?.baseUrl ||
      (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (tags) {
    params.tags = tags;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const getExercisesQueryKey = (options?: Options<GetExercisesData>) =>
  createQueryKey("getExercises", options, false, ["exercises"]);

/**
 * List exercises
 * Get all exercises for the authenticated user
 */
export const getExercisesQueryOptions = (
  options?: Options<GetExercisesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getExercises({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getExercisesQueryKey(options),
  });
};

export const postExercisesQueryKey = (options: Options<PostExercisesData>) =>
  createQueryKey("postExercises", options, false, ["exercises"]);

/**
 * Get or create exercise
 * Get an existing exercise by name or create it if it doesn't exist
 */
export const postExercisesQueryOptions = (
  options: Options<PostExercisesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postExercises({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postExercisesQueryKey(options),
  });
};

/**
 * Get or create exercise
 * Get an existing exercise by name or create it if it doesn't exist
 */
export const postExercisesMutation = (
  options?: Partial<Options<PostExercisesData>>,
): UseMutationOptions<
  PostExercisesResponse,
  PostExercisesError,
  Options<PostExercisesData>
> => {
  const mutationOptions: UseMutationOptions<
    PostExercisesResponse,
    PostExercisesError,
    Options<PostExercisesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postExercises({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getExercisesByIdQueryKey = (
  options: Options<GetExercisesByIdData>,
) => createQueryKey("getExercisesById", options, false, ["exercises"]);

/**
 * Get exercise with sets
 * Get a specific exercise with all its sets from workouts. Returns empty array when exercise has no sets.
 */
export const getExercisesByIdQueryOptions = (
  options: Options<GetExercisesByIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getExercisesById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getExercisesByIdQueryKey(options),
  });
};

export const getExercisesByIdRecentSetsQueryKey = (
  options: Options<GetExercisesByIdRecentSetsData>,
) =>
  createQueryKey("getExercisesByIdRecentSets", options, false, ["exercises"]);

/**
 * Get recent sets for exercise
 * Get the 3 most recent sets for a specific exercise. Returns empty array when exercise has no sets.
 */
export const getExercisesByIdRecentSetsQueryOptions = (
  options: Options<GetExercisesByIdRecentSetsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getExercisesByIdRecentSets({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getExercisesByIdRecentSetsQueryKey(options),
  });
};

export const getWorkoutsQueryKey = (options?: Options<GetWorkoutsData>) =>
  createQueryKey("getWorkouts", options, false, ["workouts"]);

/**
 * List workouts
 * Get all workouts for the authenticated user
 */
export const getWorkoutsQueryOptions = (options?: Options<GetWorkoutsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getWorkouts({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getWorkoutsQueryKey(options),
  });
};

export const postWorkoutsQueryKey = (options: Options<PostWorkoutsData>) =>
  createQueryKey("postWorkouts", options, false, ["workouts"]);

/**
 * Create a new workout
 * Create a new workout with exercises and sets
 */
export const postWorkoutsQueryOptions = (
  options: Options<PostWorkoutsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postWorkouts({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postWorkoutsQueryKey(options),
  });
};

/**
 * Create a new workout
 * Create a new workout with exercises and sets
 */
export const postWorkoutsMutation = (
  options?: Partial<Options<PostWorkoutsData>>,
): UseMutationOptions<
  PostWorkoutsResponse,
  PostWorkoutsError,
  Options<PostWorkoutsData>
> => {
  const mutationOptions: UseMutationOptions<
    PostWorkoutsResponse,
    PostWorkoutsError,
    Options<PostWorkoutsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postWorkouts({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Delete a workout
 * Delete a specific workout and all its associated sets. Only the owner of the workout can delete it.
 */
export const deleteWorkoutsByIdMutation = (
  options?: Partial<Options<DeleteWorkoutsByIdData>>,
): UseMutationOptions<
  unknown,
  DeleteWorkoutsByIdError,
  Options<DeleteWorkoutsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DeleteWorkoutsByIdError,
    Options<DeleteWorkoutsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteWorkoutsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getWorkoutsByIdQueryKey = (
  options: Options<GetWorkoutsByIdData>,
) => createQueryKey("getWorkoutsById", options, false, ["workouts"]);

/**
 * Get workout with sets
 * Get a specific workout with all its sets and exercises
 */
export const getWorkoutsByIdQueryOptions = (
  options: Options<GetWorkoutsByIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getWorkoutsById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getWorkoutsByIdQueryKey(options),
  });
};

/**
 * Update an existing workout (full replacement)
 * Updates a workout using full replacement semantics. The client must provide the complete workout data including date and at least one exercise with sets. This endpoint replaces the entire workout, deleting existing exercises/sets and creating new ones. For partial updates, PATCH will be implemented in a future version. Returns 204 No Content on success.
 */
export const putWorkoutsByIdMutation = (
  options?: Partial<Options<PutWorkoutsByIdData>>,
): UseMutationOptions<
  unknown,
  PutWorkoutsByIdError,
  Options<PutWorkoutsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    PutWorkoutsByIdError,
    Options<PutWorkoutsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putWorkoutsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};
