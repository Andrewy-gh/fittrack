// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from "./client";
import type {
  GetExercisesData,
  GetExercisesResponses,
  GetExercisesErrors,
  PostExercisesData,
  PostExercisesResponses,
  PostExercisesErrors,
  DeleteExercisesByIdData,
  DeleteExercisesByIdResponses,
  DeleteExercisesByIdErrors,
  GetExercisesByIdData,
  GetExercisesByIdResponses,
  GetExercisesByIdErrors,
  GetExercisesByIdRecentSetsData,
  GetExercisesByIdRecentSetsResponses,
  GetExercisesByIdRecentSetsErrors,
  GetWorkoutsData,
  GetWorkoutsResponses,
  GetWorkoutsErrors,
  PostWorkoutsData,
  PostWorkoutsResponses,
  PostWorkoutsErrors,
  GetWorkoutsFocusValuesData,
  GetWorkoutsFocusValuesResponses,
  GetWorkoutsFocusValuesErrors,
  DeleteWorkoutsByIdData,
  DeleteWorkoutsByIdResponses,
  DeleteWorkoutsByIdErrors,
  GetWorkoutsByIdData,
  GetWorkoutsByIdResponses,
  GetWorkoutsByIdErrors,
  PutWorkoutsByIdData,
  PutWorkoutsByIdResponses,
  PutWorkoutsByIdErrors,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * List exercises
 * Get all exercises for the authenticated user
 */
export const getExercises = <ThrowOnError extends boolean = false>(
  options?: Options<GetExercisesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetExercisesResponses,
    GetExercisesErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-stack-access-token",
        type: "apiKey",
      },
    ],
    url: "/exercises",
    ...options,
  });
};

/**
 * Get or create exercise
 * Get an existing exercise by name or create it if it doesn't exist
 */
export const postExercises = <ThrowOnError extends boolean = false>(
  options: Options<PostExercisesData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostExercisesResponses,
    PostExercisesErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-stack-access-token",
        type: "apiKey",
      },
    ],
    url: "/exercises",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete an exercise
 * Delete a specific exercise and all its associated sets. Only the owner of the exercise can delete it.
 */
export const deleteExercisesById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteExercisesByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteExercisesByIdResponses,
    DeleteExercisesByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-stack-access-token",
        type: "apiKey",
      },
    ],
    url: "/exercises/{id}",
    ...options,
  });
};

/**
 * Get exercise with sets
 * Get a specific exercise with all its sets from workouts. Returns empty array when exercise has no sets.
 */
export const getExercisesById = <ThrowOnError extends boolean = false>(
  options: Options<GetExercisesByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetExercisesByIdResponses,
    GetExercisesByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-stack-access-token",
        type: "apiKey",
      },
    ],
    url: "/exercises/{id}",
    ...options,
  });
};

/**
 * Get recent sets for exercise
 * Get the 3 most recent sets for a specific exercise. Returns empty array when exercise has no sets.
 */
export const getExercisesByIdRecentSets = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetExercisesByIdRecentSetsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetExercisesByIdRecentSetsResponses,
    GetExercisesByIdRecentSetsErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-stack-access-token",
        type: "apiKey",
      },
    ],
    url: "/exercises/{id}/recent-sets",
    ...options,
  });
};

/**
 * List workouts
 * Get all workouts for the authenticated user
 */
export const getWorkouts = <ThrowOnError extends boolean = false>(
  options?: Options<GetWorkoutsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetWorkoutsResponses,
    GetWorkoutsErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-stack-access-token",
        type: "apiKey",
      },
    ],
    url: "/workouts",
    ...options,
  });
};

/**
 * Create a new workout
 * Create a new workout with exercises and sets
 */
export const postWorkouts = <ThrowOnError extends boolean = false>(
  options: Options<PostWorkoutsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostWorkoutsResponses,
    PostWorkoutsErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-stack-access-token",
        type: "apiKey",
      },
    ],
    url: "/workouts",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List workout focus values
 * Get all distinct workout focus values for the authenticated user. Returns 200 OK with an empty array if no workout focus values exist.
 */
export const getWorkoutsFocusValues = <ThrowOnError extends boolean = false>(
  options?: Options<GetWorkoutsFocusValuesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetWorkoutsFocusValuesResponses,
    GetWorkoutsFocusValuesErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-stack-access-token",
        type: "apiKey",
      },
    ],
    url: "/workouts/focus-values",
    ...options,
  });
};

/**
 * Delete a workout
 * Delete a specific workout and all its associated sets. Only the owner of the workout can delete it.
 */
export const deleteWorkoutsById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteWorkoutsByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteWorkoutsByIdResponses,
    DeleteWorkoutsByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-stack-access-token",
        type: "apiKey",
      },
    ],
    url: "/workouts/{id}",
    ...options,
  });
};

/**
 * Get workout with sets
 * Get a specific workout with all its sets and exercises
 */
export const getWorkoutsById = <ThrowOnError extends boolean = false>(
  options: Options<GetWorkoutsByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetWorkoutsByIdResponses,
    GetWorkoutsByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-stack-access-token",
        type: "apiKey",
      },
    ],
    url: "/workouts/{id}",
    ...options,
  });
};

/**
 * Update an existing workout (full replacement)
 * Updates a workout using full replacement semantics. The client must provide the complete workout data including date and at least one exercise with sets. This endpoint replaces the entire workout, deleting existing exercises/sets and creating new ones. For partial updates, PATCH will be implemented in a future version. Returns 204 No Content on success.
 */
export const putWorkoutsById = <ThrowOnError extends boolean = false>(
  options: Options<PutWorkoutsByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    PutWorkoutsByIdResponses,
    PutWorkoutsByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-stack-access-token",
        type: "apiKey",
      },
    ],
    url: "/workouts/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};
