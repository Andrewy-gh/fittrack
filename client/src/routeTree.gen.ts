/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as WorkoutsImport } from './routes/workouts'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as WorkoutsIndexImport } from './routes/workouts/index'
import { Route as WorkoutsWorkoutIdImport } from './routes/workouts/$workoutId'

// Create/Update Routes

const WorkoutsRoute = WorkoutsImport.update({
  id: '/workouts',
  path: '/workouts',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const WorkoutsIndexRoute = WorkoutsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => WorkoutsRoute,
} as any)

const WorkoutsWorkoutIdRoute = WorkoutsWorkoutIdImport.update({
  id: '/$workoutId',
  path: '/$workoutId',
  getParentRoute: () => WorkoutsRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/workouts': {
      id: '/workouts'
      path: '/workouts'
      fullPath: '/workouts'
      preLoaderRoute: typeof WorkoutsImport
      parentRoute: typeof rootRoute
    }
    '/workouts/$workoutId': {
      id: '/workouts/$workoutId'
      path: '/$workoutId'
      fullPath: '/workouts/$workoutId'
      preLoaderRoute: typeof WorkoutsWorkoutIdImport
      parentRoute: typeof WorkoutsImport
    }
    '/workouts/': {
      id: '/workouts/'
      path: '/'
      fullPath: '/workouts/'
      preLoaderRoute: typeof WorkoutsIndexImport
      parentRoute: typeof WorkoutsImport
    }
  }
}

// Create and export the route tree

interface WorkoutsRouteChildren {
  WorkoutsWorkoutIdRoute: typeof WorkoutsWorkoutIdRoute
  WorkoutsIndexRoute: typeof WorkoutsIndexRoute
}

const WorkoutsRouteChildren: WorkoutsRouteChildren = {
  WorkoutsWorkoutIdRoute: WorkoutsWorkoutIdRoute,
  WorkoutsIndexRoute: WorkoutsIndexRoute,
}

const WorkoutsRouteWithChildren = WorkoutsRoute._addFileChildren(
  WorkoutsRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/workouts': typeof WorkoutsRouteWithChildren
  '/workouts/$workoutId': typeof WorkoutsWorkoutIdRoute
  '/workouts/': typeof WorkoutsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/workouts/$workoutId': typeof WorkoutsWorkoutIdRoute
  '/workouts': typeof WorkoutsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/workouts': typeof WorkoutsRouteWithChildren
  '/workouts/$workoutId': typeof WorkoutsWorkoutIdRoute
  '/workouts/': typeof WorkoutsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/workouts'
    | '/workouts/$workoutId'
    | '/workouts/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/workouts/$workoutId' | '/workouts'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/workouts'
    | '/workouts/$workoutId'
    | '/workouts/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  WorkoutsRoute: typeof WorkoutsRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  WorkoutsRoute: WorkoutsRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/workouts"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/workouts": {
      "filePath": "workouts.tsx",
      "children": [
        "/workouts/$workoutId",
        "/workouts/"
      ]
    },
    "/workouts/$workoutId": {
      "filePath": "workouts/$workoutId.tsx",
      "parent": "/workouts"
    },
    "/workouts/": {
      "filePath": "workouts/index.tsx",
      "parent": "/workouts"
    }
  }
}
ROUTE_MANIFEST_END */
